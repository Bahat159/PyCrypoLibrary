import os
import time
from cryptography.hazmat.primitives.hashes import SHA256
from cryptography.hazmat.primitives.twofactor.totp import TOTP
from cryptography.hazmat.primitives.twofactor.hotp import HOTP

# This module contains algorithms related to two-factor authentication.
# Currently, it contains an algorithm for generating and 
# verifying one time password values based on Hash-based message authentication codes (HMAC).
#
# HOTP objects take a key, length and algorithm parameter. 
# The key should be randomly generated bytes and is recommended to be 160 bits in length. 
# The length parameter controls the length of the generated one time password and must be >= 6 and <= 8.

class crypto_2fa:
    def __init__(self):
        self.key = os.urandom(int('20'))
        self.key_length = int('6')
        self.otp_length = int('8')
        self.encoding_type = SHA256()
        self.hotp_enforce_key_length = int('0')
        self.totp_enforce_key_length = int('30')
    
    def __repr__(self):
        return self
    
    def do_HOTP_2fa(self, use_hotp_2fa = True):
        if use_hotp_2fa:
            hotp = HOTP(self.key, self.key_length, self.encoding_type)
            hotp_value = hotp.generate(self.hotp_enforce_key_length)
        return hotp.verify(hotp_value, self.hotp_enforce_key_length)
    
    # TOTP objects take a key, length, algorithm and time_step parameter. 
    # The key should be randomly generated bytes and is 
    # recommended to be as long as your hash functionâ€™s output (e.g 256-bit for SHA256). 
    # The length parameter controls the length of the generated one time password and must be >= 6 and <= 8.
    # This is an implementation of RFC 6238.

    def do_TOTP_2fa(self, use_topt_2fa = True):
        if use_topt_2fa:
            totp = TOTP(self.key, self.otp_length, self.encoding_type, self.totp_enforce_key_length)
            time_value = time.time()
            totp_value = totp.generate(time_value)
        return totp.verify(totp_value, time_value)

# Provisioning URI
#
# The provisioning URI of HOTP and TOTP is a feature of Google Authenticator 
# and not actually part of the HOTP or TOTP RFCs. 
# However, it is widely supported by web sites and 
# mobile applications which are using Two-Factor authentication.
#
# For generating a provisioning URI you can use the get_provisioning_uri method of HOTP/TOTP instances.
#
# A common usage is encoding the provisioning URI into QR code 
# and guiding users to scan it with Two-Factor authentication applications in their mobile devices.

# counter = 5
# account_name = 'alice@example.com'
# issuer_name = 'Example Inc'

# hotp_uri = hotp.get_provisioning_uri(account_name, counter, issuer_name)
# totp_uri = totp.get_provisioning_uri(account_name, issuer_name)
